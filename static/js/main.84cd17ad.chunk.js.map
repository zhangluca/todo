{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","style","textDecoration","iscompleted","className","text","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeHolder","onChange","target","App","isCompleted","todos","setTodos","newTodos","splice","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yLAGA,SAASA,EAAT,GAAuD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,WACxC,OACE,yBAAKC,MAAO,CAACC,eAAgBL,EAAKM,YAAa,eAAe,IAC5DC,UAAU,QACTP,EAAKQ,KACN,6BACE,4BAAQC,QAAS,kBAAIP,EAAaD,KAAlC,YACA,4BAAQQ,QAAS,kBAAIN,EAAWF,KAAhC,OAOR,SAASS,EAAT,GAA6B,IAAVC,EAAS,EAATA,QAAS,EACHC,mBAAS,IADN,mBACpBC,EADoB,KACbC,EADa,KAU1B,OACE,0BAAMC,SARW,SAAAC,GACjBA,EAAEC,iBACEJ,IACJF,EAAQE,GACRC,EAAS,OAKP,2BACCI,KAAK,OACNX,UAAU,QACVM,MAAOA,EACPM,YAAY,cACZC,SAAU,SAAAJ,GAAC,OAAGF,EAASE,EAAEK,OAAOR,WA4DvBS,MAvDf,WAAgB,IAAD,EACaV,mBAAS,CACjC,CACEJ,KAAM,cACNe,aAAa,GAEf,CACEf,KAAM,UACNe,aAAa,GAEf,CACEf,KAAM,wBACNe,aAAa,KAZJ,mBACNC,EADM,KACCC,EADD,KAqBPvB,EAAc,SAAAD,GAClB,IAAMyB,EAAS,YAAIF,GACnBE,EAASzB,GAAOK,aAAY,EAC5BmB,EAASC,IAGLvB,EAAW,SAAAF,GACf,IAAMyB,EAAS,YAAIF,GACnBE,EAASC,OAAO1B,EAAM,GACtBwB,EAASC,IAGX,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,aACZiB,EAAMI,KAAI,SAAC5B,EAAMC,GAAP,OACT,kBAACF,EAAD,CACA8B,IAAK5B,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAGd,kBAACO,EAAD,CAAUC,QA7BD,SAAAH,GACb,IAAMkB,EAAS,GAAD,mBAAKF,GAAL,CAAY,CAAChB,UAC3BiB,EAASC,SC/CPI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,QAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,QAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBkC,I","file":"static/js/main.84cd17ad.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction Todo({todo, index, completeTodo, removeTodo}){\n  return(\n    <div style={{textDecoration: todo.iscompleted? 'line-through':''}}\n      className=\"todo\">\n      {todo.text}\n      <div>\n        <button onClick={()=>completeTodo(index)}>Complete</button>\n        <button onClick={()=>removeTodo(index)}>x</button>\n        \n      </div>\n   </div>\n  )\n}\n\nfunction TodoForm({addTodo}){\n  const[value, setValue]=useState('');\n\n  const handleSubmit=e=>{\n    e.preventDefault();\n    if(!value) return;\n    addTodo(value);\n    setValue('');\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input\n       type=\"text\"\n      className=\"input\" \n      value={value} \n      placeHolder=\"Add Todo...\"\n      onChange={e=> setValue(e.target.value)} />\n    </form>\n  )\n}\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: 'Drink Water',\n      isCompleted: false\n    },\n    {\n      text: 'Run 10k',\n      isCompleted: false\n    },\n    {\n      text: 'Build really cool car',\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo= text=>{\n    const newTodos=[...todos, {text}];\n    setTodos(newTodos);\n  }\n\n  const completeTodo =index=>{\n    const newTodos=[...todos];\n    newTodos[index].iscompleted=true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo=index=>{\n    const newTodos=[...todos];\n    newTodos.splice(index,1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index)=>(\n          <Todo \n          key={index} \n          index={index} \n          todo={todo}\n          completeTodo={completeTodo} \n          removeTodo={removeTodo}\n          /> \n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n\n   \n    \n    )\n}\n  \n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}